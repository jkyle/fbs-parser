// Generated automatically by nearley
// http://github.com/Hardmath123/nearley
(function () {
function id(x) {return x[0]; }
var grammar = {
    ParserRules: [
    {"name": "primative$subexpression$1", "symbols": ["string"]},
    {"name": "primative$subexpression$1", "symbols": ["number"]},
    {"name": "primative$subexpression$1", "symbols": ["boolean"]},
    {"name": "primative", "symbols": ["primative$subexpression$1"], "postprocess": d => d[0][0]},
    {"name": "string$ebnf$1", "symbols": ["safechar"]},
    {"name": "string$ebnf$1", "symbols": ["string$ebnf$1", "safechar"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "string", "symbols": ["quote", "string$ebnf$1", "quote"], "postprocess": d => d[1].join('')},
    {"name": "safechar", "symbols": ["quote"], "postprocess": d => "\\" + d[0]},
    {"name": "safechar", "symbols": ["tick"], "postprocess": id},
    {"name": "safechar", "symbols": ["alpha"], "postprocess": id},
    {"name": "safechar", "symbols": ["ws"], "postprocess": id},
    {"name": "safechar", "symbols": ["punctuation"], "postprocess": id},
    {"name": "quote", "symbols": [{"literal":"\""}], "postprocess": id},
    {"name": "tick", "symbols": [{"literal":"'"}], "postprocess": id},
    {"name": "alpha", "symbols": [/[a-zA-Z]/], "postprocess": id},
    {"name": "punctuation", "symbols": [/[.?!,$%*#()]/], "postprocess": id},
    {"name": "ws", "symbols": [{"literal":" "}]},
    {"name": "number", "symbols": ["integer"], "postprocess": id},
    {"name": "number", "symbols": ["float"], "postprocess": id},
    {"name": "integer$ebnf$1", "symbols": [/[0-9]/]},
    {"name": "integer$ebnf$1", "symbols": ["integer$ebnf$1", /[0-9]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "integer", "symbols": ["negative", "integer$ebnf$1"], "postprocess": d => parseInt(d[0] + d[1].join(''))},
    {"name": "float$ebnf$1", "symbols": [/[0-9]/]},
    {"name": "float$ebnf$1", "symbols": ["float$ebnf$1", /[0-9]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "float$ebnf$2", "symbols": [/[0-9]/]},
    {"name": "float$ebnf$2", "symbols": ["float$ebnf$2", /[0-9]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "float", "symbols": ["negative", "float$ebnf$1", {"literal":"."}, "float$ebnf$2"], "postprocess": d => parseFloat(`${d[0]}${d[1].join('')}.${d[3].join('')}`)},
    {"name": "negative$ebnf$1", "symbols": [{"literal":"-"}], "postprocess": id},
    {"name": "negative$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "negative", "symbols": ["negative$ebnf$1"], "postprocess": d => d[0] ? "-" : ""},
    {"name": "boolean$string$1", "symbols": [{"literal":"t"}, {"literal":"r"}, {"literal":"u"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "boolean", "symbols": ["boolean$string$1"], "postprocess": d => true},
    {"name": "boolean$string$2", "symbols": [{"literal":"f"}, {"literal":"a"}, {"literal":"l"}, {"literal":"s"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "boolean", "symbols": ["boolean$string$2"], "postprocess": d => false},
    {"name": "_$ebnf$1", "symbols": [/[ ]/]},
    {"name": "_$ebnf$1", "symbols": ["_$ebnf$1", /[ ]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "_", "symbols": ["_$ebnf$1"], "postprocess": null},
    {"name": "__$ebnf$1", "symbols": []},
    {"name": "__$ebnf$1", "symbols": ["__$ebnf$1", /[ ]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "__", "symbols": ["__$ebnf$1"], "postprocess": null},
    {"name": "game_object", "symbols": ["name", "props"], "postprocess": d => ({ type: "GAME_OBJECT", name: d[0], props: d[1] })},
    {"name": "name$ebnf$1", "symbols": [/[A-Z ]/]},
    {"name": "name$ebnf$1", "symbols": ["name$ebnf$1", /[A-Z ]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "name", "symbols": ["name$ebnf$1"], "postprocess": d => d[0].join('')},
    {"name": "name$ebnf$2", "symbols": [/[A-Z ]/]},
    {"name": "name$ebnf$2", "symbols": ["name$ebnf$2", /[A-Z ]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "name", "symbols": [{"literal":"<"}, "name$ebnf$2", {"literal":">"}], "postprocess": d => d[1].join('')},
    {"name": "props$ebnf$1$subexpression$1", "symbols": ["prop"]},
    {"name": "props$ebnf$1$subexpression$1", "symbols": ["sProp"]},
    {"name": "props$ebnf$1", "symbols": ["props$ebnf$1$subexpression$1"]},
    {"name": "props$ebnf$1$subexpression$2", "symbols": ["prop"]},
    {"name": "props$ebnf$1$subexpression$2", "symbols": ["sProp"]},
    {"name": "props$ebnf$1", "symbols": ["props$ebnf$1", "props$ebnf$1$subexpression$2"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "props", "symbols": ["props$ebnf$1"], "postprocess": d => d[0].map(e => e[0])},
    {"name": "prop$ebnf$1", "symbols": [/[a-zA-Z]/]},
    {"name": "prop$ebnf$1", "symbols": ["prop$ebnf$1", /[a-zA-Z]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "prop", "symbols": [{"literal":"."}, "prop$ebnf$1"], "postprocess": d => d[1].join('')},
    {"name": "sProp$ebnf$1", "symbols": [/[a-zA-Z ]/]},
    {"name": "sProp$ebnf$1", "symbols": ["sProp$ebnf$1", /[a-zA-Z ]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "sProp", "symbols": [{"literal":"."}, {"literal":"<"}, "sProp$ebnf$1", {"literal":">"}], "postprocess": d => d[2].join('')},
    {"name": "condition", "symbols": ["game_object", "_", "comparator", "_", "primative"], "postprocess": d => ({ left: d[0], operator: d[2], right: d[4] })},
    {"name": "comparator$subexpression$1", "symbols": ["eq"]},
    {"name": "comparator$subexpression$1", "symbols": ["ne"]},
    {"name": "comparator$subexpression$1", "symbols": ["lt"]},
    {"name": "comparator$subexpression$1", "symbols": ["lte"]},
    {"name": "comparator$subexpression$1", "symbols": ["gt"]},
    {"name": "comparator$subexpression$1", "symbols": ["gte"]},
    {"name": "comparator$subexpression$1", "symbols": ["has"]},
    {"name": "comparator", "symbols": ["comparator$subexpression$1"], "postprocess": d => d[0][0]},
    {"name": "eq$subexpression$1", "symbols": [{"literal":"="}]},
    {"name": "eq$subexpression$1$string$1", "symbols": [{"literal":"="}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "eq$subexpression$1", "symbols": ["eq$subexpression$1$string$1"]},
    {"name": "eq$subexpression$1$string$2", "symbols": [{"literal":"="}, {"literal":"="}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "eq$subexpression$1", "symbols": ["eq$subexpression$1$string$2"]},
    {"name": "eq$subexpression$1$string$3", "symbols": [{"literal":"e"}, {"literal":"q"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "eq$subexpression$1", "symbols": ["eq$subexpression$1$string$3"]},
    {"name": "eq$subexpression$1$string$4", "symbols": [{"literal":"E"}, {"literal":"Q"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "eq$subexpression$1", "symbols": ["eq$subexpression$1$string$4"]},
    {"name": "eq$subexpression$1$string$5", "symbols": [{"literal":"i"}, {"literal":"s"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "eq$subexpression$1", "symbols": ["eq$subexpression$1$string$5"]},
    {"name": "eq$subexpression$1$string$6", "symbols": [{"literal":"I"}, {"literal":"S"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "eq$subexpression$1", "symbols": ["eq$subexpression$1$string$6"]},
    {"name": "eq", "symbols": ["eq$subexpression$1"], "postprocess": d => "==="},
    {"name": "ne$subexpression$1$string$1", "symbols": [{"literal":"!"}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "ne$subexpression$1", "symbols": ["ne$subexpression$1$string$1"]},
    {"name": "ne$subexpression$1$string$2", "symbols": [{"literal":"!"}, {"literal":"="}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "ne$subexpression$1", "symbols": ["ne$subexpression$1$string$2"]},
    {"name": "ne$subexpression$1$string$3", "symbols": [{"literal":"n"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "ne$subexpression$1", "symbols": ["ne$subexpression$1$string$3"]},
    {"name": "ne$subexpression$1$string$4", "symbols": [{"literal":"N"}, {"literal":"E"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "ne$subexpression$1", "symbols": ["ne$subexpression$1$string$4"]},
    {"name": "ne$subexpression$1$string$5", "symbols": [{"literal":"n"}, {"literal":"o"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "ne$subexpression$1", "symbols": ["ne$subexpression$1$string$5"]},
    {"name": "ne$subexpression$1$string$6", "symbols": [{"literal":"N"}, {"literal":"O"}, {"literal":"T"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "ne$subexpression$1", "symbols": ["ne$subexpression$1$string$6"]},
    {"name": "ne", "symbols": ["ne$subexpression$1"], "postprocess": d => "!=="},
    {"name": "lt$subexpression$1", "symbols": [{"literal":"<"}]},
    {"name": "lt$subexpression$1$string$1", "symbols": [{"literal":"l"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "lt$subexpression$1", "symbols": ["lt$subexpression$1$string$1"]},
    {"name": "lt$subexpression$1$string$2", "symbols": [{"literal":"L"}, {"literal":"T"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "lt$subexpression$1", "symbols": ["lt$subexpression$1$string$2"]},
    {"name": "lt", "symbols": ["lt$subexpression$1"], "postprocess": d => "<"},
    {"name": "lte$subexpression$1$string$1", "symbols": [{"literal":"<"}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "lte$subexpression$1", "symbols": ["lte$subexpression$1$string$1"]},
    {"name": "lte$subexpression$1$string$2", "symbols": [{"literal":"l"}, {"literal":"t"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "lte$subexpression$1", "symbols": ["lte$subexpression$1$string$2"]},
    {"name": "lte$subexpression$1$string$3", "symbols": [{"literal":"L"}, {"literal":"T"}, {"literal":"E"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "lte$subexpression$1", "symbols": ["lte$subexpression$1$string$3"]},
    {"name": "lte", "symbols": ["lte$subexpression$1"], "postprocess": d => "<="},
    {"name": "gt$subexpression$1", "symbols": [{"literal":">"}]},
    {"name": "gt$subexpression$1$string$1", "symbols": [{"literal":"g"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "gt$subexpression$1", "symbols": ["gt$subexpression$1$string$1"]},
    {"name": "gt$subexpression$1$string$2", "symbols": [{"literal":"G"}, {"literal":"T"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "gt$subexpression$1", "symbols": ["gt$subexpression$1$string$2"]},
    {"name": "gt", "symbols": ["gt$subexpression$1"], "postprocess": d => ">"},
    {"name": "gte$subexpression$1$string$1", "symbols": [{"literal":">"}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "gte$subexpression$1", "symbols": ["gte$subexpression$1$string$1"]},
    {"name": "gte$subexpression$1$string$2", "symbols": [{"literal":"g"}, {"literal":"t"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "gte$subexpression$1", "symbols": ["gte$subexpression$1$string$2"]},
    {"name": "gte$subexpression$1$string$3", "symbols": [{"literal":"G"}, {"literal":"T"}, {"literal":"E"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "gte$subexpression$1", "symbols": ["gte$subexpression$1$string$3"]},
    {"name": "gte", "symbols": ["gte$subexpression$1"], "postprocess": d => ">="},
    {"name": "has$subexpression$1$string$1", "symbols": [{"literal":"h"}, {"literal":"a"}, {"literal":"s"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "has$subexpression$1", "symbols": ["has$subexpression$1$string$1"]},
    {"name": "has$subexpression$1$string$2", "symbols": [{"literal":"H"}, {"literal":"A"}, {"literal":"S"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "has$subexpression$1", "symbols": ["has$subexpression$1$string$2"]},
    {"name": "has$subexpression$1$string$3", "symbols": [{"literal":"c"}, {"literal":"o"}, {"literal":"n"}, {"literal":"t"}, {"literal":"a"}, {"literal":"i"}, {"literal":"n"}, {"literal":"s"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "has$subexpression$1", "symbols": ["has$subexpression$1$string$3"]},
    {"name": "has$subexpression$1$string$4", "symbols": [{"literal":"C"}, {"literal":"O"}, {"literal":"N"}, {"literal":"T"}, {"literal":"A"}, {"literal":"I"}, {"literal":"N"}, {"literal":"S"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "has$subexpression$1", "symbols": ["has$subexpression$1$string$4"]},
    {"name": "has$subexpression$1$string$5", "symbols": [{"literal":"i"}, {"literal":"n"}, {"literal":"c"}, {"literal":"l"}, {"literal":"u"}, {"literal":"d"}, {"literal":"e"}, {"literal":"s"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "has$subexpression$1", "symbols": ["has$subexpression$1$string$5"]},
    {"name": "has$subexpression$1$string$6", "symbols": [{"literal":"I"}, {"literal":"N"}, {"literal":"C"}, {"literal":"L"}, {"literal":"U"}, {"literal":"D"}, {"literal":"E"}, {"literal":"S"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "has$subexpression$1", "symbols": ["has$subexpression$1$string$6"]},
    {"name": "has", "symbols": ["has$subexpression$1"], "postprocess": d => "has"},
    {"name": "passage$ebnf$1", "symbols": []},
    {"name": "passage$ebnf$1$subexpression$1$ebnf$1", "symbols": [{"literal":"\n"}]},
    {"name": "passage$ebnf$1$subexpression$1$ebnf$1", "symbols": ["passage$ebnf$1$subexpression$1$ebnf$1", {"literal":"\n"}], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "passage$ebnf$1$subexpression$1", "symbols": [{"literal":"\n"}, "passage$ebnf$1$subexpression$1$ebnf$1", "paragraph"]},
    {"name": "passage$ebnf$1", "symbols": ["passage$ebnf$1", "passage$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "passage", "symbols": ["paragraph", "passage$ebnf$1"], "postprocess": d => ({ paragraphs: [d[0], ...d[1].map(e => e[2])]})},
    {"name": "paragraph$ebnf$1", "symbols": []},
    {"name": "paragraph$ebnf$1$subexpression$1", "symbols": [{"literal":"\n"}, "line"]},
    {"name": "paragraph$ebnf$1", "symbols": ["paragraph$ebnf$1", "paragraph$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "paragraph", "symbols": ["line", "paragraph$ebnf$1"], "postprocess": d => ({lines:[d[0], ...d[1].map(e => e[1])]})},
    {"name": "line$ebnf$1", "symbols": []},
    {"name": "line$ebnf$1$subexpression$1", "symbols": ["_", "token"]},
    {"name": "line$ebnf$1", "symbols": ["line$ebnf$1", "line$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "line", "symbols": ["__", "token", "line$ebnf$1", "__"], "postprocess": d => ({ tokens: [d[1], ...d[2].map(e => e[1])]})},
    {"name": "token", "symbols": ["safeToken"], "postprocess": id},
    {"name": "safeToken$ebnf$1", "symbols": ["safechar"]},
    {"name": "safeToken$ebnf$1", "symbols": ["safeToken$ebnf$1", "safechar"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "safeToken", "symbols": ["safeToken$ebnf$1"], "postprocess": d=> d[0].join('')},
    {"name": "conditional", "symbols": ["conditional_start", "__", "passage", "__", "conditional_end"], "postprocess": d => ({ type: 'condition', condition: d[0], passage: d[2]})},
    {"name": "conditional_start$string$1", "symbols": [{"literal":"{"}, {"literal":"?"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "conditional_start", "symbols": ["conditional_start$string$1", "_", "condition", "__", {"literal":"}"}], "postprocess": d => d[2]},
    {"name": "conditional_end$string$1", "symbols": [{"literal":"{"}, {"literal":"x"}, {"literal":"}"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "conditional_end", "symbols": ["conditional_end$string$1"]},
    {"name": "lol", "symbols": ["passage"]}
]
  , ParserStart: "lol"
}
if (typeof module !== 'undefined'&& typeof module.exports !== 'undefined') {
   module.exports = grammar;
} else {
   window.grammar = grammar;
}
})();
